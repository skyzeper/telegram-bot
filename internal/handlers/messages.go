package handlers

import (
	"fmt"
	"strings"
	"time"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/skyzeper/telegram-bot/internal/handlers/callbacks"
	"github.com/skyzeper/telegram-bot/internal/menus"
	"github.com/skyzeper/telegram-bot/internal/models"
	"github.com/skyzeper/telegram-bot/internal/security"
	"github.com/skyzeper/telegram-bot/internal/services/chat"
	"github.com/skyzeper/telegram-bot/internal/services/notification"
	"github.com/skyzeper/telegram-bot/internal/services/order"
	"github.com/skyzeper/telegram-bot/internal/services/user"
	"github.com/skyzeper/telegram-bot/internal/state"
)

// Handler manages incoming Telegram updates
type Handler struct {
	bot                *tgbotapi.BotAPI
	security           *security.SecurityChecker
	menus              *menus.MenuGenerator
	userService        *user.Service
	orderService       *order.Service
	chatService        *chat.Service
	state              *state.Manager
	callbackHandler    *callbacks.CallbackHandler
	notificationService *notification.Service
}

// NewHandler creates a new Handler
func NewHandler(
	bot *tgbotapi.BotAPI,
	security *security.SecurityChecker,
	menus *menus.MenuGenerator,
	userService *user.Service,
	orderService *order.Service,
	chatService *chat.Service,
	state *state.Manager,
	callbackHandler *callbacks.CallbackHandler,
	notificationService *notification.Service,
) *Handler {
	return &Handler{
		bot:                bot,
		security:           security,
		menus:              menus,
		userService:        userService,
		orderService:       orderService,
		chatService:        chatService,
		state:              state,
		callbackHandler:    callbackHandler,
		notificationService: notificationService,
	}
}

// HandleUpdate processes incoming Telegram updates
func (h *Handler) HandleUpdate(update *tgbotapi.Update) {
	if update.Message == nil {
		if update.CallbackQuery != nil {
			h.callbackHandler.HandleCallback(update.CallbackQuery)
		}
		return
	}

	chatID := update.Message.Chat.ID
	currentState := h.state.Get(chatID)

	// Check if user exists, create if not
	user, err := h.userService.GetUser(chatID)
	if err != nil {
		err = h.security.CreateUser(
			chatID,
			"client",
			update.Message.From.FirstName,
			update.Message.From.LastName,
			update.Message.From.UserName,
			"",
		)
		if err != nil {
			h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
			return
		}
		user = &models.User{ChatID: chatID, Role: "client"}
	}

	// Handle commands
	if update.Message.IsCommand() {
		h.handleCommand(update, user)
		return
	}

	// Handle state-based interactions
	if currentState.Module != "" {
		switch currentState.Module {
		case "order":
			// Delegate to order steps handler
			// Note: This is handled in order/steps.go
			return
		case "chat":
			h.handleChatMessage(update)
			return
		}
	}

	// Handle text messages
	h.handleTextMessage(update, user)
}

// handleCommand processes Telegram commands
func (h *Handler) handleCommand(update *tgbotapi.Update, user *models.User) {
	chatID := update.Message.Chat.ID
	command := update.Message.Command()

	switch command {
	case "start":
		h.sendMessage(chatID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöõ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", h.menus.MainMenu(user))
	case "help":
		h.sendMessage(chatID, "üìö –ü–æ–º–æ—â—å: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥, —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π.", h.menus.MainMenu(user))
	default:
		h.sendMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /help.", h.menus.MainMenu(user))
	}
}

// handleTextMessage processes text messages
func (h *Handler) handleTextMessage(update *tgbotapi.Update, user *models.User) {
	chatID := update.Message.Chat.ID
	messageText := strings.ToLower(update.Message.Text)

	switch messageText {
	case "üóëÔ∏è –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É":
		role, err := h.security.GetUserRole(chatID)
		if err != nil {
			h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
			return
		}
		if role == "client" || role == "operator" || role == "main_operator" || role == "owner" {
			h.state.Set(chatID, state.State{
				Module:     "order",
				Step:       1,
				TotalSteps: 11,
				Data:       make(map[string]interface{}),
			})
			h.sendMessage(chatID, "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:", h.menus.CategoryMenu())
		} else {
			h.sendMessage(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º.", nil)
		}

	case "üìû —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º":
		role, err := h.security.GetUserRole(chatID)
		if err != nil {
			h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
			return
		}
		if role == "client" || role == "operator" || role == "main_operator" || role == "owner" {
			h.state.Set(chatID, state.State{
				Module:     "chat",
				Step:       1,
				TotalSteps: 1,
				Data:       make(map[string]interface{}),
			})
			h.sendMessage(chatID, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º:", nil)
		} else {
			h.sendMessage(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É.", nil)
		}

	case "üîó –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!":
		role, err := h.security.GetUserRole(chatID)
		if err != nil {
			h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
			return
		}
		if role == "client" || role == "operator" || role == "main_operator" || role == "owner" {
			h.sendMessage(chatID, "üîó –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:", h.menus.ReferralMenu())
		} else {
			h.sendMessage(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.", nil)
		}

	case "üìã –∑–∞–∫–∞–∑—ã":
		role, err := h.security.GetUserRole(chatID)
		if err != nil {
			h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
			return
		}
		if role == "operator" || role == "main_operator" || role == "owner" {
			h.sendMessage(chatID, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤:", h.menus.NewOrdersMenu(nil))
		} else {
			h.sendMessage(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º.", nil)
		}

	case "üßë‚Äçüíº —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç–∞—Ç–æ–º":
		role, err := h.security.GetUserRole(chatID)
		if err != nil {
			h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
			return
		}
		if role == "main_operator" || role == "owner" {
			h.sendMessage(chatID, "üßë‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç–∞—Ç–æ–º:", h.menus.StaffMenu(chatID))
		} else {
			h.sendMessage(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —à—Ç–∞—Ç–æ–º.", nil)
		}

	case "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		role, err := h.security.GetUserRole(chatID)
		if err != nil {
			h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
			return
		}
		if role == "owner" {
			h.sendMessage(chatID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", nil)
		} else {
			h.sendMessage(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.", nil)
		}

	default:
		h.sendMessage(chatID, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", h.menus.MainMenu(user))
	}
}

// handleChatMessage processes messages in chat mode
func (h *Handler) handleChatMessage(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	messageText := update.Message.Text

	// Save user message
	err := h.chatService.SaveMessage(chatID, messageText, true)
	if err != nil {
		h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}

	// Notify operator
	operatorID, err := h.chatService.GetActiveOperator()
	if err != nil {
		h.sendMessage(chatID, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}

	notification := &models.Notification{
		UserID:    operatorID,
		Type:      "chat_message",
		Message:   fmt.Sprintf("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", chatID, messageText),
		CreatedAt: time.Now(),
	}
	err = h.notificationService.CreateNotification(notification)
	if err != nil {
		h.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}

	h.sendMessage(chatID, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.", nil)
}

// sendMessage sends a message to a chat
func (h *Handler) sendMessage(chatID int64, text string, replyMarkup interface{}) {
	msg := tgbotapi.NewMessage(chatID, text)
	if replyMarkup != nil {
		switch rm := replyMarkup.(type) {
		case tgbotapi.ReplyKeyboardMarkup:
			msg.ReplyMarkup = rm
		case tgbotapi.InlineKeyboardMarkup:
			msg.ReplyMarkup = rm
		}
	}
	if _, err := h.bot.Send(msg); err != nil {
		fmt.Printf("Failed to send message: %v\n", err)
	}
}