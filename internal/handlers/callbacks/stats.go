package callbacks

import (
	"fmt"
	"strings"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/skyzeper/telegram-bot/internal/models"
	"github.com/skyzeper/telegram-bot/internal/menus"
	"github.com/skyzeper/telegram-bot/internal/services/stats"
	"github.com/skyzeper/telegram-bot/internal/security"
	"github.com/skyzeper/telegram-bot/internal/utils"
)

// StatsHandler handles statistics-related callbacks
type StatsHandler struct {
	bot          *tgbotapi.BotAPI
	security     security.SecurityChecker
	menus        *menus.MenuGenerator
	statsService *stats.Service
}

// NewStatsHandler creates a new StatsHandler
func NewStatsHandler(
	bot *tgbotapi.BotAPI,
	security security.SecurityChecker,
	menus *menus.MenuGenerator,
	statsService *stats.Service,
) *StatsHandler {
	return &StatsHandler{
		bot:          bot,
		security:     security,
		menus:        menus,
		statsService: statsService,
	}
}

// HandleStatsCallback processes statistics-related callback queries
func (h *StatsHandler) HandleStatsCallback(callback *tgbotapi.CallbackQuery, user *models.User, data string) {
	if !h.security.HasRole(callback.Message.Chat.ID, "owner") {
		h.sendUnauthorized(callback.Message.Chat.ID)
		return
	}

	if data == "stats_date" {
		h.handleMonthSelection(callback)
	} else if strings.HasPrefix(data, "stats_month_") {
		h.handleWeekSelection(callback, data)
	} else if strings.HasPrefix(data, "stats_week_") {
		h.handleWeekStats(callback, data)
	} else {
		h.handleStats(callback, user, data)
	}
}

// handleStats shows statistics
func (h *StatsHandler) handleStats(callback *tgbotapi.CallbackQuery, user *models.User, data string) {
	var stats models.Stats
	var err error
	period := strings.TrimPrefix(data, "stats_")
	switch period {
	case "day":
		stats, err = h.statsService.GetStatsForDay()
	case "week":
		stats, err = h.statsService.GetStatsForWeek()
	case "month":
		stats, err = h.statsService.GetStatsForMonth()
	case "year":
		stats, err = h.statsService.GetStatsForYear()
	case "all":
		stats, err = h.statsService.GetStatsForAllTime()
	default:
		h.sendError(callback.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
		return
	}

	if err != nil {
		h.sendError(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
		return
	}

	reply := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		fmt.Sprintf(
			"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ %s:\n"+
				"- –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: %d\n"+
				"- –í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞: %d\n"+
				"- –î–µ–º–æ–Ω—Ç–∞–∂: %d\n"+
				"- –°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã: %d\n"+
				"- –°—É–º–º–∞: %.2f —Ä—É–±.\n"+
				"- –î–æ–ª–≥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π: %.2f —Ä—É–±.\n\nüìà –î–µ—Ä–∂–∏—Ç–µ —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ –±–∏–∑–Ω–µ—Å–∞!",
			period,
			stats.TotalOrders,
			stats.WasteRemovalOrders,
			stats.DemolitionOrders,
			stats.ConstructionOrders,
			stats.TotalAmount,
			stats.DriverDebts,
		),
	)
	reply.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_stats"),
		),
	)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// handleMonthSelection shows month selection for stats
func (h *StatsHandler) handleMonthSelection(callback *tgbotapi.CallbackQuery) {
	reply := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:")
	reply.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–Ø–Ω–≤–∞—Ä—å", "stats_month_01"),
			tgbotapi.NewInlineKeyboardButtonData("–§–µ–≤—Ä–∞–ª—å", "stats_month_02"),
			tgbotapi.NewInlineKeyboardButtonData("–ú–∞—Ä—Ç", "stats_month_03"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ê–ø—Ä–µ–ª—å", "stats_month_04"),
			tgbotapi.NewInlineKeyboardButtonData("–ú–∞–π", "stats_month_05"),
			tgbotapi.NewInlineKeyboardButtonData("–ò—é–Ω—å", "stats_month_06"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ò—é–ª—å", "stats_month_07"),
			tgbotapi.NewInlineKeyboardButtonData("–ê–≤–≥—É—Å—Ç", "stats_month_08"),
			tgbotapi.NewInlineKeyboardButtonData("–°–µ–Ω—Ç—è–±—Ä—å", "stats_month_09"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û–∫—Ç—è–±—Ä—å", "stats_month_10"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–æ—è–±—Ä—å", "stats_month_11"),
			tgbotapi.NewInlineKeyboardButtonData("–î–µ–∫–∞–±—Ä—å", "stats_month_12"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_stats"),
		),
	)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// handleWeekSelection shows week selection for stats
func (h *StatsHandler) handleWeekSelection(callback *tgbotapi.CallbackQuery, data string) {
	month := strings.TrimPrefix(data, "stats_month_")
	reply := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, fmt.Sprintf("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –º–µ—Å—è—Ü–∞ %s:", month))
	reply.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1 –Ω–µ–¥–µ–ª—è", fmt.Sprintf("stats_week_%s_1", month)),
			tgbotapi.NewInlineKeyboardButtonData("2 –Ω–µ–¥–µ–ª—è", fmt.Sprintf("stats_week_%s_2", month)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("3 –Ω–µ–¥–µ–ª—è", fmt.Sprintf("stats_week_%s_3", month)),
			tgbotapi.NewInlineKeyboardButtonData("4 –Ω–µ–¥–µ–ª—è", fmt.Sprintf("stats_week_%s_4", month)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "stats_date"),
		),
	)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// handleWeekStats shows stats for selected week
func (h *StatsHandler) handleWeekStats(callback *tgbotapi.CallbackQuery, data string) {
	parts := strings.Split(strings.TrimPrefix(data, "stats_week_"), "_")
	if len(parts) != 2 {
		h.sendError(callback.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ–¥–µ–ª–∏.")
		return
	}

	month := parts[0]
	// Placeholder: Fetch stats for specific week
	// In real implementation, query statsService with month and week
	reply := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é %s/%s:\n(–¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)", month, parts[1]),
	)
	reply.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", fmt.Sprintf("stats_month_%s", month)),
		),
	)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// sendMainMenu sends the main menu
func (h *StatsHandler) sendMainMenu(chatID int64, user *models.User) {
	reply := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	reply.ReplyMarkup = h.menus.MainMenu(user)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// sendError sends an error message
func (h *StatsHandler) sendError(chatID int64, text string) {
	reply := tgbotapi.NewMessage(chatID, text)
	reply.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// sendUnauthorized sends unauthorized access message
func (h *StatsHandler) sendUnauthorized(chatID int64) {
	reply := tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
	reply.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}