package callbacks

import (
	"fmt"
	"strconv"
	"strings"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/skyzeper/telegram-bot/internal/models"
	"github.com/skyzeper/telegram-bot/internal/menus"
	"github.com/skyzeper/telegram-bot/internal/services/referral"
	"github.com/skyzeper/telegram-bot/internal/services/user"
	"github.com/skyzeper/telegram-bot/internal/security"
	"github.com/skyzeper/telegram-bot/internal/utils"
)

// ReferralsHandler handles referral-related callbacks
type ReferralsHandler struct {
	bot             *tgbotapi.BotAPI
	security        security.SecurityChecker
	menus           *menus.MenuGenerator
	referralService *referral.Service
	userService     *user.Service
}

// NewReferralsHandler creates a new ReferralsHandler
func NewReferralsHandler(
	bot *tgbotapi.BotAPI,
	security security.SecurityChecker,
	menus *menus.MenuGenerator,
	referralService *referral.Service,
	userService *user.Service,
) *ReferralsHandler {
	return &ReferralsHandler{
		bot:             bot,
		security:        security,
		menus:           menus,
		referralService: referralService,
		userService:     userService,
	}
}

// HandleReferralsCallback processes referral-related callback queries
func (h *ReferralsHandler) HandleReferralsCallback(callback *tgbotapi.CallbackQuery, user *models.User, data string) {
	switch {
	case data == "referral_link":
		h.handleReferralLink(callback, user)
	case data == "referral_qr":
		h.handleReferralQR(callback, user)
	case strings.HasPrefix(data, "referral_payout_"):
		h.handleReferralPayout(callback, user, data)
	}
}

// handleReferralLink generates referral link
func (h *ReferralsHandler) handleReferralLink(callback *tgbotapi.CallbackQuery, user *models.User) {
	if !h.security.HasRole(callback.Message.Chat.ID, "user") {
		h.sendUnauthorized(callback.Message.Chat.ID)
		return
	}

	link := fmt.Sprintf("@vseVsimferopole?start=ref_%d", callback.Message.Chat.ID)
	reply := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		fmt.Sprintf("üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n%s\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 500 —Ä—É–±–ª–µ–π –∑–∞ –∑–∞–∫–∞–∑ –æ—Ç 10,000 —Ä—É–±–ª–µ–π! üéâ", link),
	)
	reply.ReplyMarkup = h.menus.ReferralMenu()
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// handleReferralQR generates QR code
func (h *ReferralsHandler) handleReferralQR(callback *tgbotapi.CallbackQuery, user *models.User) {
	if !h.security.HasRole(callback.Message.Chat.ID, "user") {
		h.sendUnauthorized(callback.Message.Chat.ID)
		return
	}

	link := fmt.Sprintf("@vseVsimferopole?start=ref_%d", callback.Message.Chat.ID)
	qrPath, err := h.referralService.GenerateQRCode(link, callback.Message.Chat.ID)
	if err != nil {
		h.sendError(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞.")
		return
	}

	photo := tgbotapi.NewPhoto(callback.Message.Chat.ID, tgbotapi.FilePath(qrPath))
	photo.Caption = "üì∑ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π QR-–∫–æ–¥!\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 500 —Ä—É–±–ª–µ–π –∑–∞ –∑–∞–∫–∞–∑ –æ—Ç 10,000 —Ä—É–±–ª–µ–π! üéâ"
	photo.ReplyMarkup = h.menus.ReferralMenu()
	if _, err := h.bot.Send(photo); err != nil {
		utils.LogError(err)
	}
}

// handleReferralPayout requests referral payout
func (h *ReferralsHandler) handleReferralPayout(callback *tgbotapi.CallbackQuery, user *models.User, data string) {
	if !h.security.HasRole(callback.Message.Chat.ID, "user") {
		h.sendUnauthorized(callback.Message.Chat.ID)
		return
	}

	inviteeIDStr := strings.TrimPrefix(data, "referral_payout_")
	inviteeID, err := strconv.Atoi(inviteeIDStr)
	if err != nil {
		h.sendError(callback.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞.")
		return
	}

	if err := h.referralService.RequestPayout(user.ChatID, int64(inviteeID)); err != nil {
		h.sendError(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã.")
		return
	}

	// Notify main operator and owner
	notifyMsg := fmt.Sprintf(
		"> üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (Chat ID: %d) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É 500 —Ä—É–±–ª–µ–π –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª (Chat ID: %d).\n> –°–≤—è–∂–∏—Ç–µ—Å—å –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã.",
		user.FirstName, user.ChatID, inviteeID,
	)
	for _, role := range []string{"main_operator", "owner"} {
		users, _ := h.userService.ListUsersByRole(role)
		for _, u := range users {
			msg := tgbotapi.NewMessage(u.ChatID, notifyMsg)
			msg.ParseMode = "Markdown"
			h.bot.Send(msg)
		}
	}

	reply := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! üéâ",
	)
	reply.ReplyMarkup = h.menus.ReferralMenu()
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// sendMainMenu sends the main menu
func (h *ReferralsHandler) sendMainMenu(chatID int64, user *models.User) {
	reply := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	reply.ReplyMarkup = h.menus.MainMenu(user)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// sendError sends an error message
func (h *ReferralsHandler) sendError(chatID int64, text string) {
	reply := tgbotapi.NewMessage(chatID, text)
	reply.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// sendUnauthorized sends unauthorized access message
func (h *ReferralsHandler) sendUnauthorized(chatID int64) {
	reply := tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
	reply.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}