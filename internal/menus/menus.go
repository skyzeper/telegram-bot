package menus

import (
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/skyzeper/telegram-bot/internal/models"
	"time"
)

// MenuGenerator generates Telegram menus
type MenuGenerator struct{}

// NewMenuGenerator creates a new MenuGenerator
func NewMenuGenerator() *MenuGenerator {
	return &MenuGenerator{}
}

// MainMenu generates the main menu
func (m *MenuGenerator) MainMenu(user *models.User) tgbotapi.ReplyKeyboardMarkup {
	buttons := [][]tgbotapi.KeyboardButton{
		{tgbotapi.NewKeyboardButton("üóëÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")},
		{tgbotapi.NewKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")},
		{tgbotapi.NewKeyboardButton("üîó –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!")},
	}
	if user.Role == "operator" || user.Role == "main_operator" || user.Role == "owner" {
		buttons = append(buttons, []tgbotapi.KeyboardButton{tgbotapi.NewKeyboardButton("üìã –ó–∞–∫–∞–∑—ã")})
	}
	if user.Role == "main_operator" || user.Role == "owner" {
		buttons = append(buttons, []tgbotapi.KeyboardButton{tgbotapi.NewKeyboardButton("üßë‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç–∞—Ç–æ–º")})
	}
	if user.Role == "owner" {
		buttons = append(buttons, []tgbotapi.KeyboardButton{tgbotapi.NewKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")})
	}
	return tgbotapi.NewReplyKeyboard(buttons...)
}

// CategoryMenu generates the category selection menu
func (m *MenuGenerator) CategoryMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóëÔ∏è –í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞"),
			tgbotapi.NewKeyboardButton("üî® –î–µ–º–æ–Ω—Ç–∞–∂"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üèóÔ∏è –°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã"),
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
}

// SubcategoryMenu generates the subcategory selection menu
func (m *MenuGenerator) SubcategoryMenu(category string) tgbotapi.ReplyKeyboardMarkup {
	var buttons []tgbotapi.KeyboardButton
	switch category {
	case "–≤—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞":
		buttons = []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º—É—Å–æ—Ä"),
			tgbotapi.NewKeyboardButton("–ë—ã—Ç–æ–≤–æ–π –º—É—Å–æ—Ä"),
			tgbotapi.NewKeyboardButton("–ú–µ–±–µ–ª—å"),
		}
	case "–¥–µ–º–æ–Ω—Ç–∞–∂":
		buttons = []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton("–°—Ç–µ–Ω—ã"),
			tgbotapi.NewKeyboardButton("–ü–æ–ª—ã"),
			tgbotapi.NewKeyboardButton("–ü–æ—Ç–æ–ª–∫–∏"),
		}
	case "—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã":
		buttons = []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton("–ü–µ—Å–æ–∫"),
			tgbotapi.NewKeyboardButton("–¶–µ–º–µ–Ω—Ç"),
			tgbotapi.NewKeyboardButton("–ö–∏—Ä–ø–∏—á"),
		}
	}
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(buttons...),
		tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")),
	)
}

// DateMenu generates the date selection menu
func (m *MenuGenerator) DateMenu() tgbotapi.InlineKeyboardMarkup {
	var buttons []tgbotapi.InlineKeyboardButton
	now := time.Now()
	for i := 0; i < 7; i++ {
		date := now.AddDate(0, 0, i)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
			date.Format("02.01.2006"),
			fmt.Sprintf("date_%s", date.Format("2006-01-02")),
		))
	}
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(buttons[0:4]...),
		tgbotapi.NewInlineKeyboardRow(buttons[4:7]...),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", "prev_week"),
			tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", "next_week"),
		),
	)
}

// TimeMenu generates the time selection menu
func (m *MenuGenerator) TimeMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("09:00"),
			tgbotapi.NewKeyboardButton("12:00"),
			tgbotapi.NewKeyboardButton("15:00"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("18:00"),
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
}

// PhotoMenu generates the photo upload menu
func (m *MenuGenerator) PhotoMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "photo_add"),
			tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "photo_skip"),
		),
	)
}

// VideoMenu generates the video upload menu
func (m *MenuGenerator) VideoMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", "video_add"),
			tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "video_skip"),
		),
	)
}

// PhoneMenu generates the phone input menu
func (m *MenuGenerator) PhoneMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonContact("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
}

// SkipMenu generates the skip option menu
func (m *MenuGenerator) SkipMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
}

// PaymentMenu generates the payment method selection menu
func (m *MenuGenerator) PaymentMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ"),
			tgbotapi.NewKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
}

// ConfirmMenu generates the order confirmation menu
func (m *MenuGenerator) ConfirmMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
			tgbotapi.NewKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
}

// NewOrdersMenu generates the new orders menu
func (m *MenuGenerator) NewOrdersMenu(orders []models.Order) tgbotapi.InlineKeyboardMarkup {
	var buttons []tgbotapi.InlineKeyboardButton
	for _, order := range orders {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("–ó–∞–∫–∞–∑ #%d", order.ID),
			fmt.Sprintf("order_%d", order.ID),
		))
	}
	rows := make([][]tgbotapi.InlineKeyboardButton, 0)
	for i := 0; i < len(buttons); i += 2 {
		end := i + 2
		if end > len(buttons) {
			end = len(buttons)
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(buttons[i:end]...))
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// InProgressOrdersMenu generates the in-progress orders menu
func (m *MenuGenerator) InProgressOrdersMenu(category string, orders []models.Order) tgbotapi.InlineKeyboardMarkup {
	var buttons []tgbotapi.InlineKeyboardButton
	buttons = append(buttons,
		tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞", "in_progress_waste_removal"),
		tgbotapi.NewInlineKeyboardButtonData("üî® –î–µ–º–æ–Ω—Ç–∞–∂", "in_progress_demolition"),
		tgbotapi.NewInlineKeyboardButtonData("üèóÔ∏è –°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "in_progress_construction_materials"),
		tgbotapi.NewInlineKeyboardButtonData("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", "in_progress_all"),
	)
	for _, order := range orders {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("–ó–∞–∫–∞–∑ #%d", order.ID),
			fmt.Sprintf("order_%d", order.ID),
		))
	}
	rows := make([][]tgbotapi.InlineKeyboardButton, 0)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(buttons[0:4]...))
	for i := 4; i < len(buttons); i += 2 {
		end := i + 2
		if end > len(buttons) {
			end = len(buttons)
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(buttons[i:end]...))
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// OrderActionsMenu generates the order actions menu
func (m *MenuGenerator) OrderActionsMenu(orderID int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", fmt.Sprintf("accept_order_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", fmt.Sprintf("cancel_order_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", fmt.Sprintf("contact_client_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", fmt.Sprintf("block_client_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–º–µ–Ω–∏—Ç—å", fmt.Sprintf("block_cancel_%d", orderID)),
		),
	)
}

// InProgressOrderActionsMenu generates the in-progress order actions menu
func (m *MenuGenerator) InProgressOrderActionsMenu(orderID int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë∑ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", fmt.Sprintf("assign_executor_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", fmt.Sprintf("confirm_order_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∏ –£—á–µ—Å—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ", fmt.Sprintf("cash_order_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", fmt.Sprintf("contact_client_%d", orderID)),
		),
	)
}

// AssignExecutorMenu generates the executor assignment menu
func (m *MenuGenerator) AssignExecutorMenu(orderID int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üõª –í–æ–¥–∏—Ç–µ–ª–∏", fmt.Sprintf("assign_drivers_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("üí™ –ì—Ä—É–∑—á–∏–∫–∏", fmt.Sprintf("assign_loaders_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("confirm_executors_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", fmt.Sprintf("cancel_executors_%d", orderID)),
		),
	)
}

// StaffMenu generates the staff management menu
func (m *MenuGenerator) StaffMenu(chatID int64) tgbotapi.InlineKeyboardMarkup {
	buttons := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üßë‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "staff_add"),
		tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "staff_delete"),
	}
	if true { // Replace with owner role check
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData("üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "staff_list"))
	}
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(buttons...),
	)
}

// ContactOperatorMenu generates the contact operator menu
func (m *MenuGenerator) ContactOperatorMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìû –°–∞–º –ø–æ–∑–≤–æ–Ω—é", "contact_call"),
			tgbotapi.NewInlineKeyboardButtonData("üì≤ –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ", "contact_request_call"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –í —á–∞—Ç–µ", "contact_chat"),
		),
	)
}

// ReferralMenu generates the referral program menu
func (m *MenuGenerator) ReferralMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", "referral_link"),
			tgbotapi.NewInlineKeyboardButtonData("üì∑ –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥", "referral_qr"),
		),
	)
}
