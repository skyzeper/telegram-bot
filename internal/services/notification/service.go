package notification

import (
	"fmt"
	"time"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/skyzeper/telegram-bot/internal/models"
)

// Service handles notification-related business logic
type Service struct {
	bot  *tgbotapi.BotAPI
	repo Repository
}

// Repository defines the interface for notification data access
type Repository interface {
	CreateNotification(notification *models.Notification) error
	GetPendingNotifications() ([]models.Notification, error)
	MarkNotificationSent(notificationID int) error
}

// NewService creates a new notification service
func NewService(bot *tgbotapi.BotAPI, repo Repository) *Service {
	return &Service{
		bot:  bot,
		repo: repo,
	}
}

// SendOrderNotification sends a notification about an order event
func (s *Service) SendOrderNotification(userID int64, order *models.Order, event string) error {
	if userID <= 0 || order == nil {
		return fmt.Errorf("invalid user ID or order")
	}

	var message string
	switch event {
	case "created":
		message = fmt.Sprintf(
			"> **–ó–∞–∫–∞–∑ #%d —Å–æ–∑–¥–∞–Ω!** üöõ\n"+
				"> –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s (%s)\n"+
				"> –ê–¥—Ä–µ—Å: %s\n"+
				"> –ú—ã —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏! üòä",
			order.ID, order.Category, order.Subcategory, order.Address,
		)
	case "confirmed":
		message = fmt.Sprintf(
			"> **–ó–∞–∫–∞–∑ #%d –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!** ‚úÖ\n"+
				"> –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s (%s)\n"+
				"> –°—Ç–æ–∏–º–æ—Å—Ç—å: %.2f —Ä—É–±.\n"+
				"> –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—Å! üôå",
			order.ID, order.Category, order.Subcategory, order.Cost,
		)
	case "assigned":
		message = fmt.Sprintf(
			"> **–ó–∞–∫–∞–∑ #%d –Ω–∞–∑–Ω–∞—á–µ–Ω!** üë∑\n"+
				"> –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s (%s)\n"+
				"> –ê–¥—Ä–µ—Å: %s\n"+
				"> –î–∞—Ç–∞: %s\n"+
				"> –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
			order.ID, order.Category, order.Subcategory, order.Address, order.Date.Format("2 January 2006"),
		)
	default:
		return fmt.Errorf("unknown order event: %s", event)
	}

	msg := tgbotapi.NewMessage(userID, message)
	msg.ParseMode = "Markdown"
	if _, err := s.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send order notification: %v", err)
	}

	notification := &models.Notification{
		UserID:    userID,
		Type:      "order_" + event,
		Message:   message,
		SentAt:    time.Now(),
		CreatedAt: time.Now(),
	}
	return s.repo.CreateNotification(notification)
}

// SendReferralNotification sends a notification about a referral event
func (s *Service) SendReferralNotification(userID, inviteeID int64, event string) error {
	if userID <= 0 || inviteeID <= 0 {
		return fmt.Errorf("invalid user or invitee ID")
	}

	var message string
	switch event {
	case "joined":
		message = fmt.Sprintf(
			"> üéâ –í–∞—à –¥—Ä—É–≥ (ID: %d) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"+
				"> –ü–æ–ª—É—á–∏—Ç–µ 500 —Ä—É–±–ª–µ–π –∑–∞ –µ–≥–æ –∑–∞–∫–∞–∑ –æ—Ç 10,000 —Ä—É–±–ª–µ–π!",
			inviteeID,
		)
	case "payout_requested":
		message = fmt.Sprintf(
			"> üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (ID: %d) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"+
				"> –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ 500 —Ä—É–±–ª–µ–π.",
			inviteeID,
		)
	default:
		return fmt.Errorf("unknown referral event: %s", event)
	}

	msg := tgbotapi.NewMessage(userID, message)
	msg.ParseMode = "Markdown"
	if _, err := s.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send referral notification: %v", err)
	}

	notification := &models.Notification{
		UserID:    userID,
		Type:      "referral_" + event,
		Message:   message,
		SentAt:    time.Now(),
		CreatedAt: time.Now(),
	}
	return s.repo.CreateNotification(notification)
}

// SendReviewNotification sends a notification about a review event
func (s *Service) SendReviewNotification(userID int64, review *models.Review) error {
	if userID <= 0 || review == nil {
		return fmt.Errorf("invalid user ID or review")
	}

	message := fmt.Sprintf(
		"> üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ –Ω–∞ –∑–∞–∫–∞–∑ #%d!\n"+
			"> –û—Ü–µ–Ω–∫–∞: %d/5\n"+
			"> –í–∞—à –≥–æ–ª–æ—Å –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üôå",
		review.OrderID, review.Rating,
	)
	if review.Comment != "" {
		message += fmt.Sprintf("> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s", review.Comment)
	}

	msg := tgbotapi.NewMessage(userID, message)
	msg.ParseMode = "Markdown"
	if _, err := s.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send review notification: %v", err)
	}

	notification := &models.Notification{
		UserID:    userID,
		Type:      "review_submitted",
		Message:   message,
		SentAt:    time.Now(),
		CreatedAt: time.Now(),
	}
	return s.repo.CreateNotification(notification)
}

// SendOperatorNotification sends a notification to operators
func (s *Service) SendOperatorNotification(operatorID int64, message string) error {
	if operatorID <= 0 || message == "" {
		return fmt.Errorf("invalid operator ID or message")
	}

	msg := tgbotapi.NewMessage(operatorID, message)
	msg.ParseMode = "Markdown"
	if _, err := s.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send operator notification: %v", err)
	}

	notification := &models.Notification{
		UserID:    operatorID,
		Type:      "operator_alert",
		Message:   message,
		SentAt:    time.Now(),
		CreatedAt: time.Now(),
	}
	return s.repo.CreateNotification(notification)
}

// ProcessPendingNotifications sends pending notifications
func (s *Service) ProcessPendingNotifications() error {
	notifications, err := s.repo.GetPendingNotifications()
	if err != nil {
		return fmt.Errorf("failed to get pending notifications: %v", err)
	}

	for _, notification := range notifications {
		msg := tgbotapi.NewMessage(notification.UserID, notification.Message)
		msg.ParseMode = "Markdown"
		if _, err := s.bot.Send(msg); err != nil {
			continue // Log error but continue processing
		}
		if err := s.repo.MarkNotificationSent(notification.ID); err != nil {
			continue // Log error but continue processing
		}
	}
	return nil
}