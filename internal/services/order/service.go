package order

import (
	"context"
	"database/sql"
	"fmt"
	"time"

	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/skyzeper/telegram-bot/internal/models"
	"github.com/skyzeper/telegram-bot/internal/state"
	"github.com/skyzeper/telegram-bot/internal/utils"
)

type Service struct {
	repo   *Repository
	states *state.StateManager
}

func NewService(db *sql.DB, states *state.StateManager) *Service {
	return &Service{
		repo:   NewRepository(db),
		states: states,
	}
}

func (s *Service) StartOrder(ctx context.Context, chatID int64, category string) {
	totalSteps := 9
	if category == "demolition" {
		totalSteps = 7
	}
	s.states.Set(chatID, state.State{
		Step:       1,
		TotalSteps: totalSteps,
		Module:     "create_order",
		Data: map[string]interface{}{
			"category": category,
		},
	})
}

func (s *Service) HandleOrderSteps(ctx context.Context, chatID int64, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	currentState := s.states.Get(chatID)
	if currentState.Module != "create_order" {
		return
	}

	data := currentState.Data
	switch currentState.Step {
	case 1:
		data["subcategory"] = msg.Text
		s.states.Set(chatID, state.State{
			Step:       2,
			TotalSteps: currentState.TotalSteps,
			Module:     "create_order",
			Data:       data,
		})
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–®–∞–≥ 2/%d: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", currentState.TotalSteps)))
	case 2:
		data["name"] = msg.Text
		s.states.Set(chatID, state.State{
			Step:       3,
			TotalSteps: currentState.TotalSteps,
			Module:     "create_order",
			Data:       data,
		})
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–®–∞–≥ 3/%d: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)", currentState.TotalSteps)))
	case 3:
		if msg.Photo != nil {
			photos, ok := data["photos"].([]string)
			if !ok {
				photos = []string{}
			}
			if len(photos) >= 20 {
				bot.Send(tgbotapi.NewMessage(chatID, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 20 —Ñ–æ—Ç–æ"))
				return
			}
			photos = append(photos, msg.Photo[len(msg.Photo)-1].FileID)
			data["photos"] = photos
			s.states.Set(chatID, state.State{
				Step:       4,
				TotalSteps: currentState.TotalSteps,
				Module:     "create_order",
				Data:       data,
			})
			msgConfig := tgbotapi.NewMessage(chatID, fmt.Sprintf("–®–∞–≥ 4/%d: –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Ñ–æ—Ç–æ. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë?", currentState.TotalSteps, len(photos)))
			msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "photo_add"),
					tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "photo_confirm"),
					tgbotapi.NewInlineKeyboardButtonData("üîô –û—Ç–º–µ–Ω–∏—Ç—å", "photo_cancel"),
				),
			)
			bot.Send(msgConfig)
		} else if msg.Video != nil {
			data["video"] = msg.Video.FileID
			s.states.Set(chatID, state.State{
				Step:       5,
				TotalSteps: currentState.TotalSteps,
				Module:     "create_order",
				Data:       data,
			})
			msgConfig := tgbotapi.NewMessage(chatID, fmt.Sprintf("–®–∞–≥ 5/%d: –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", currentState.TotalSteps))
			msgConfig.ReplyMarkup = s.DateKeyboard()
			bot.Send(msgConfig)
		}
	case 4:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –≤ callbacks.go
	case 5:
		if msg.Text == "üö® –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è" {
			data["date"] = time.Now().Format("2006-01-02")
			data["time"] = ""
			s.states.Set(chatID, state.State{
				Step:       7,
				TotalSteps: currentState.TotalSteps,
				Module:     "create_order",
				Data:       data,
			})
			msgConfig := tgbotapi.NewMessage(chatID, fmt.Sprintf("–®–∞–≥ %d/%d: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (+7XXX-XXX-XX-XX –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üìû)", 7, currentState.TotalSteps))
			msgConfig.ReplyMarkup = s.phoneKeyboard()
			bot.Send(msgConfig)
		} else {
			date, err := time.Parse("2 —è–Ω–≤–∞—Ä—è 2006 –≥.", msg.Text)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 1 —è–Ω–≤–∞—Ä—è 2025 –≥."))
				return
			}
			data["date"] = date.Format("2006-01-02")
			s.states.Set(chatID, state.State{
				Step:       6,
				TotalSteps: currentState.TotalSteps,
				Module:     "create_order",
				Data:       data,
			})
			msgConfig := tgbotapi.NewMessage(chatID, fmt.Sprintf("–®–∞–≥ 6/%d: –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", currentState.TotalSteps))
			msgConfig.ReplyMarkup = s.timeKeyboard()
			bot.Send(msgConfig)
		}
	case 6:
		data["time"] = msg.Text
		s.states.Set(chatID, state.State{
			Step:       7,
			TotalSteps: currentState.TotalSteps,
			Module:     "create_order",
			Data:       data,
		})
		msgConfig := tgbotapi.NewMessage(chatID, fmt.Sprintf("–®–∞–≥ %d/%d: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (+7XXX-XXX-XX-XX –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üìû)", 7, currentState.TotalSteps))
		msgConfig.ReplyMarkup = s.phoneKeyboard()
		bot.Send(msgConfig)
	case 7:
		phone := utils.FormatPhone(msg.Text)
		if phone == "" && msg.Contact == nil {
			bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"))
			return
		}
		if msg.Contact != nil {
			phone = utils.FormatPhone(msg.Contact.PhoneNumber)
		}
		data["phone"] = phone
		s.states.Set(chatID, state.State{
			Step:       8,
			TotalSteps: currentState.TotalSteps,
			Module:     "create_order",
			Data:       data,
		})
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–®–∞–≥ %d/%d: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å", 8, currentState.TotalSteps)))
	case 8:
		data["address"] = msg.Text
		s.states.Set(chatID, state.State{
			Step:       9,
			TotalSteps: currentState.TotalSteps,
			Module:     "create_order",
			Data:       data,
		})
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–®–∞–≥ %d/%d: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ", 9, currentState.TotalSteps)))
	case 9:
		data["description"] = msg.Text
		photos, _ := data["photos"].([]string)
		video, _ := data["video"].(string)
		order := &models.Order{
			UserID:      chatID,
			Category:    data["category"].(string),
			Subcategory: data["subcategory"].(string),
			Photos:      photos,
			Video:       video,
			Date:        time.Now(),
			Time:        data["time"].(string),
			Phone:       data["phone"].(string),
			Address:     data["address"].(string),
			Description: data["description"].(string),
			Status:      "new",
		}
		if err := s.repo.CreateOrder(ctx, order); err != nil {
			msgConfig := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err))
			msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "action_back"),
				),
			)
			bot.Send(msgConfig)
			s.states.Clear(chatID)
			return
		}
		s.states.Clear(chatID)
		bot.Send(tgbotapi.NewMessage(chatID, "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!"))
	}
}

func (s *Service) DateKeyboard() tgbotapi.InlineKeyboardMarkup {
	var buttons []tgbotapi.InlineKeyboardButton
	buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData("üö® –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", "date_urgent"))
	now := time.Now()
	for i := 0; i < 7; i++ {
		date := now.AddDate(0, 0, i)
		prefix := "üü¢"
		if date.Weekday() == time.Saturday || date.Weekday() == time.Sunday {
			prefix = "üî¥"
		}
		text := fmt.Sprintf("%s %s", prefix, date.Format("2 —è–Ω–≤–∞—Ä—è 2006 –≥."))
		data := fmt.Sprintf("date_%s", date.Format("2006-01-02"))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(text, data))
	}
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(buttons...))
}

func (s *Service) timeKeyboard() tgbotapi.InlineKeyboardMarkup {
	var buttons []tgbotapi.InlineKeyboardButton
	for hour := 9; hour <= 18; hour++ {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%02d:00", hour), fmt.Sprintf("time_%02d:00", hour)))
	}
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(buttons...))
}

func (s *Service) phoneKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", "phone_contact"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "action_back"),
		),
	)
}
