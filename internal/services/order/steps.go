package order

import (
	"fmt"
	"strings"
	"time"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/skyzeper/telegram-bot/internal/menus"
	"github.com/skyzeper/telegram-bot/internal/models"
	"github.com/skyzeper/telegram-bot/internal/state"
	"github.com/skyzeper/telegram-bot/internal/utils"
)

// StepHandler handles the step-by-step order creation process
type StepHandler struct {
	bot     *tgbotapi.BotAPI
	menus   *menus.MenuGenerator
	service *Service
	state   *state.Manager
}

// NewStepHandler creates a new StepHandler
func NewStepHandler(bot *tgbotapi.BotAPI, menus *menus.MenuGenerator, service *Service, state *state.Manager) *StepHandler {
	return &StepHandler{
		bot:     bot,
		menus:   menus,
		service: service,
		state:   state,
	}
}

// HandleStep processes the current step in the order creation process
func (h *StepHandler) HandleStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	currentState := h.state.Get(chatID)
	if currentState.Module != "order" {
		return
	}

	switch currentState.Step {
	case 1: // Category
		h.handleCategoryStep(update)
	case 2: // Subcategory
		h.handleSubcategoryStep(update)
	case 3: // Date
		h.handleDateStep(update)
	case 4: // Time
		h.handleTimeStep(update)
	case 5: // Photos
		h.handlePhotosStep(update)
	case 6: // Video
		h.handleVideoStep(update)
	case 7: // Phone
		h.handlePhoneStep(update)
	case 8: // Address
		h.handleAddressStep(update)
	case 9: // Description
		h.handleDescriptionStep(update)
	case 10: // Payment Method
		h.handlePaymentMethodStep(update)
	case 11: // Confirmation
		h.handleConfirmationStep(update)
	}
}

// handleCategoryStep handles the category selection step
func (h *StepHandler) handleCategoryStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	if update.Message.Text == "" {
		h.sendStepMessage(chatID, "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:", h.menus.CategoryMenu())
		return
	}

	category := strings.ToLower(update.Message.Text)
	if category != "–≤—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞" && category != "–¥–µ–º–æ–Ω—Ç–∞–∂" && category != "—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã" {
		h.sendStepMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:", h.menus.CategoryMenu())
		return
	}

	h.state.Set(chatID, state.State{
		Module:     "order",
		Step:       2,
		TotalSteps: 11,
		Data: map[string]interface{}{
			"category": category,
		},
	})
	h.sendStepMessage(chatID, "üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", h.menus.SubcategoryMenu(category))
}

// handleSubcategoryStep handles the subcategory selection step
func (h *StepHandler) handleSubcategoryStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	currentState := h.state.Get(chatID)
	category, _ := currentState.Data["category"].(string)

	if update.Message.Text == "" {
		h.sendStepMessage(chatID, "üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", h.menus.SubcategoryMenu(category))
		return
	}

	subcategory := strings.ToLower(update.Message.Text)
	valid := false
	switch category {
	case "–≤—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞":
		valid = subcategory == "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º—É—Å–æ—Ä" || subcategory == "–±—ã—Ç–æ–≤–æ–π –º—É—Å–æ—Ä" || subcategory == "–º–µ–±–µ–ª—å"
	case "–¥–µ–º–æ–Ω—Ç–∞–∂":
		valid = subcategory == "—Å—Ç–µ–Ω—ã" || subcategory == "–ø–æ–ª—ã" || subcategory == "–ø–æ—Ç–æ–ª–∫–∏"
	case "—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã":
		valid = subcategory == "–ø–µ—Å–æ–∫" || subcategory == "—Ü–µ–º–µ–Ω—Ç" || subcategory == "–∫–∏—Ä–ø–∏—á"
	}

	if !valid {
		h.sendStepMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:", h.menus.SubcategoryMenu(category))
		return
	}

	currentState.Data["subcategory"] = subcategory
	currentState.Step = 3
	h.state.Set(chatID, currentState)
	h.sendStepMessage(chatID, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞:", h.menus.DateMenu())
}

// handleDateStep handles the date selection step
func (h *StepHandler) handleDateStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	if update.Message.Text == "" {
		h.sendStepMessage(chatID, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞:", h.menus.DateMenu())
		return
	}

	date, err := time.Parse("02.01.2006", update.Message.Text)
	if err != nil || date.Before(time.Now().Truncate(24*time.Hour)) {
		h.sendStepMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:", h.menus.DateMenu())
		return
	}

	currentState := h.state.Get(chatID)
	currentState.Data["date"] = date.Format("2006-01-02")
	currentState.Step = 4
	h.state.Set(chatID, currentState)
	h.sendStepMessage(chatID, "üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:", h.menus.TimeMenu())
}

// handleTimeStep handles the time selection step
func (h *StepHandler) handleTimeStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	if update.Message.Text == "" {
		h.sendStepMessage(chatID, "üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:", h.menus.TimeMenu())
		return
	}

	_, err := time.Parse("15:04", update.Message.Text)
	if err != nil {
		h.sendStepMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:", h.menus.TimeMenu())
		return
	}

	currentState := h.state.Get(chatID)
	currentState.Data["time"] = update.Message.Text
	currentState.Step = 5
	h.state.Set(chatID, currentState)
	h.sendStepMessage(chatID, "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", h.menus.PhotoMenu())
}

// handlePhotosStep handles the photo upload step
func (h *StepHandler) handlePhotosStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	currentState := h.state.Get(chatID)

	if update.Message.Text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
		currentState.Data["photos"] = []string{}
		currentState.Step = 6
		h.state.Set(chatID, currentState)
		h.sendStepMessage(chatID, "üé• –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", h.menus.VideoMenu())
		return
	}

	if update.Message.Photo != nil {
		var photos []string
		if p, ok := currentState.Data["photos"].([]string); ok {
			photos = p
		}
		for _, photo := range update.Message.Photo {
			photos = append(photos, photo.FileID)
		}
		currentState.Data["photos"] = photos
		h.state.Set(chatID, currentState)
		h.sendStepMessage(chatID, "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:", h.menus.PhotoMenu())
		return
	}

	h.sendStepMessage(chatID, "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:", h.menus.PhotoMenu())
}

// handleVideoStep handles the video upload step
func (h *StepHandler) handleVideoStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	currentState := h.state.Get(chatID)

	if update.Message.Text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
		currentState.Data["video"] = ""
		currentState.Step = 7
		h.state.Set(chatID, currentState)
		h.sendStepMessage(chatID, "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", h.menus.PhoneMenu())
		return
	}

	if update.Message.Video != nil {
		currentState.Data["video"] = update.Message.Video.FileID
		currentState.Step = 7
		h.state.Set(chatID, currentState)
		h.sendStepMessage(chatID, "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", h.menus.PhoneMenu())
		return
	}

	h.sendStepMessage(chatID, "üé• –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:", h.menus.VideoMenu())
}

// handlePhoneStep handles the phone number input step
func (h *StepHandler) handlePhoneStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	currentState := h.state.Get(chatID)

	if update.Message.Text == "" && update.Message.Contact == nil {
		h.sendStepMessage(chatID, "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:", h.menus.PhoneMenu())
		return
	}

	phone := update.Message.Text
	if update.Message.Contact != nil {
		phone = update.Message.Contact.PhoneNumber
	}

	if !utils.IsValidPhone(phone) {
		h.sendStepMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:", h.menus.PhoneMenu())
		return
	}

	currentState.Data["phone"] = phone
	currentState.Step = 8
	h.state.Set(chatID, currentState)
	h.sendStepMessage(chatID, "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", nil)
}

// handleAddressStep handles the address input step
func (h *StepHandler) handleAddressStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	if update.Message.Text == "" {
		h.sendStepMessage(chatID, "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", nil)
		return
	}

	currentState := h.state.Get(chatID)
	currentState.Data["address"] = update.Message.Text
	currentState.Step = 9
	h.state.Set(chatID, currentState)
	h.sendStepMessage(chatID, "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", h.menus.SkipMenu())
}

// handleDescriptionStep handles the description input step
func (h *StepHandler) handleDescriptionStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	currentState := h.state.Get(chatID)

	if update.Message.Text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
		currentState.Data["description"] = ""
	} else {
		currentState.Data["description"] = update.Message.Text
	}

	currentState.Step = 10
	h.state.Set(chatID, currentState)
	h.sendStepMessage(chatID, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", h.menus.PaymentMenu())
}

// handlePaymentMethodStep handles the payment method selection step
func (h *StepHandler) handlePaymentMethodStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	if update.Message.Text == "" {
		h.sendStepMessage(chatID, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", h.menus.PaymentMenu())
		return
	}

	paymentMethod := strings.ToLower(update.Message.Text)
	if paymentMethod != "–Ω–∞–ª–∏—á–Ω—ã–µ" && paymentMethod != "–∫–∞—Ä—Ç–∞" {
		h.sendStepMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:", h.menus.PaymentMenu())
		return
	}

	currentState := h.state.Get(chatID)
	currentState.Data["payment_method"] = paymentMethod
	currentState.Step = 11
	h.state.Set(chatID, currentState)
	h.handleConfirmationStep(update)
}

// handleConfirmationStep handles the final confirmation step
func (h *StepHandler) handleConfirmationStep(update *tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	currentState := h.state.Get(chatID)

	if update.Message.Text != "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" {
		summary := h.generateOrderSummary(currentState.Data)
		h.sendStepMessage(chatID, fmt.Sprintf("üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n%s", summary), h.menus.ConfirmMenu())
		return
	}

	// Parse time
	timeVal, err := time.Parse("15:04", currentState.Data["time"].(string))
	if err != nil {
		user := &models.User{ChatID: chatID}
		h.sendStepMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", h.menus.MainMenu(user))
		return
	}

	// Create order
	date, _ := time.Parse("2006-01-02", currentState.Data["date"].(string))
	order := &models.Order{
		UserID:        chatID,
		Category:      currentState.Data["category"].(string),
		Subcategory:   currentState.Data["subcategory"].(string),
		Photos:        convertToStringSlice(currentState.Data["photos"]),
		Video:         currentState.Data["video"].(string),
		Date:          date,
		Time:          timeVal,
		Phone:         currentState.Data["phone"].(string),
		Address:       currentState.Data["address"].(string),
		Description:   currentState.Data["description"].(string),
		PaymentMethod: currentState.Data["payment_method"].(string),
	}

	if err := h.service.CreateOrder(order); err != nil {
		user := &models.User{ChatID: chatID}
		h.sendStepMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", h.menus.MainMenu(user))
		utils.LogError(err)
		return
	}

	h.state.Clear(chatID)
	user := &models.User{ChatID: chatID}
	reply := tgbotapi.NewMessage(chatID, "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏. üòä")
	reply.ReplyMarkup = h.menus.MainMenu(user)
	if _, err := h.bot.Send(reply); err != nil {
		utils.LogError(err)
	}
}

// generateOrderSummary creates a summary of the order
func (h *StepHandler) generateOrderSummary(data map[string]interface{}) string {
	return fmt.Sprintf(
		"> **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞** üöõ\n"+
			"> –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s (%s)\n"+
			"> –î–∞—Ç–∞: %s\n"+
			"> –í—Ä–µ–º—è: %s\n"+
			"> –¢–µ–ª–µ—Ñ–æ–Ω: %s\n"+
			"> –ê–¥—Ä–µ—Å: %s\n"+
			"> –û–ø–∏—Å–∞–Ω–∏–µ: %s\n"+
			"> –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: %s",
		data["category"], data["subcategory"], data["date"], data["time"],
		data["phone"], data["address"], data["description"], data["payment_method"],
	)
}

// convertToStringSlice converts interface to string slice
func convertToStringSlice(i interface{}) []string {
	if i == nil {
		return nil
	}
	if slice, ok := i.([]string); ok {
		return slice
	}
	return nil
}

// sendStepMessage sends a message for the current step
func (h *StepHandler) sendStepMessage(chatID int64, text string, replyMarkup interface{}) {
	msg := tgbotapi.NewMessage(chatID, text)
	if replyMarkup != nil {
		switch rm := replyMarkup.(type) {
		case tgbotapi.ReplyKeyboardMarkup:
			msg.ReplyMarkup = rm
		case tgbotapi.InlineKeyboardMarkup:
			msg.ReplyMarkup = rm
		}
	}
	if _, err := h.bot.Send(msg); err != nil {
		utils.LogError(err)
	}
}